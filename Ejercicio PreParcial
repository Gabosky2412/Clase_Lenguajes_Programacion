// Clase Chef
class Chef {
    private int cantidadPlatos = 0;
    private final Object lock = new Object();

    public void producirPlato(String nombrePlato, int cantidad) {
        synchronized (lock) {
            cantidadPlatos += cantidad;
            System.out.println("Chef produjo " + cantidad + " platos de " + nombrePlato + ". Total: " + cantidadPlatos);
        }
    }
}

// Clase Mesero
class Mesero {
    private int cantidadPedidos = 0;
    private final Object lock = new Object();

    public void realizarPedido(String nombrePlato, int cantidad) {
        synchronized (lock) {
            if (cantidadPedidos < cantidad) {
                System.out.println("Mesero: No hay suficientes platos de " + nombrePlato + ". Esperando...");
                try {
                    lock.wait(); // El mesero espera hasta que haya suficientes platos
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            cantidadPedidos -= cantidad;
            System.out.println("Mesero entreg칩 " + cantidad + " platos de " + nombrePlato + ". Pendientes: " + cantidadPedidos);
        }
    }

    public void recibirPedido(int cantidad) {
        synchronized (lock) {
            cantidadPedidos += cantidad;
            System.out.println("Mesero recibi칩 un pedido de " + cantidad + " platos. Pendientes: " + cantidadPedidos);
            lock.notifyAll(); // Notificar a los meseros que est치n esperando
        }
    }
}

// Clase principal para probar la simulaci칩n
public class SimulacionHilos {
    public static void main(String[] args) {
        Chef chef = new Chef();
        Mesero mesero = new Mesero();

        // Hilos productores (Chefs)
        Thread chef1 = new Thread(() -> chef.producirPlato("Pizza", 5));
        Thread chef2 = new Thread(() -> chef.producirPlato("Pasta", 3));

        // Hilos consumidores (Meseros)
        Thread mesero1 = new Thread(() -> mesero.realizarPedido("Pizza", 2));
        Thread mesero2 = new Thread(() -> mesero.realizarPedido("Pasta", 4));

        // Iniciar los hilos
        chef1.start();
        chef2.start();
        mesero1.start();
        mesero2.start();

        // Esperar a que todos los hilos terminen
        try {
            chef1.join();
            chef2.join();
            mesero1.join();
            mesero2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
